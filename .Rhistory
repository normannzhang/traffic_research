x = NULL
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.5, linetype = "dashed", color = "gray40") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = NULL
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.5, linetype = "dashed", color = "gray40") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = NULL
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.5, linetype = "dashed", color = "gray40") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = NULL
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.5, linetype = "dashed", color = "gray40") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = 'Condition Type'
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.67, linetype = "dashed", color = "black") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = 'Condition Type'
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
bar_circle_plot <- function(data) {
data <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3")
)
}
bar_circle_plot(model_df)
return(data)
return(data)
bar_circle_plot <- function(data) {
return(data)
data <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3")
)
}
bar_circle_plot(model_df)
bar_circle_plot <- function(data) {
data <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
return(data)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3")
)
}
bar_circle_plot(model_df)
bar_circle_plot <- function(data) {
df <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3")
)
}
bar_circle_plot(model_df)
bar_circle_plot <- function(data) {
df <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3"),
plot.title = element_text(hjust = 0.5, face = 'bold', size = 16)
)
}
bar_circle_plot(model_df)
bar_circle_plot <- function(data) {
df <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
# title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick"),
axis.title.y.left = element_text(color = "#56A0D3", face = 'bold')
# plot.title = element_text(hjust = 0.5, face = 'bold', size = 16)
)
}
bar_circle_plot(model_df)
bar_circle_plot <- function(data) {
df <- data |>
group_by(YEAR) |>
summarise(
total_crashes = n(),
severe_crashes = sum(severe == 1)) |>
mutate(pct_change = severe_crashes / total_crashes)
ggplot(df, aes(x = YEAR)) +
geom_col(aes(y = total_crashes), fill = "#56A0D3") +
geom_line(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 1.2) +
geom_point(aes(y = pct_change * max(total_crashes)), color = "firebrick", size = 3) +
scale_y_continuous(
name = "Total Crashes",
sec.axis = sec_axis(~ . / max(df$total_crashes), name = "% of Crashes That Were Severe", labels = scales::percent_format(accuracy = 0.1))
) +
labs(
# title = "Trend of Crash Severity in Chicago (2020–2024)",
x = "Year",
caption = "Shaded bars = total crashes | Red line = % of crashes that were severe"
) +
theme_minimal() +
theme(
axis.title.y.right = element_text(color = "firebrick"),
axis.text.y.right = element_text(color = "firebrick", face = 'bold'),
axis.title.y.left = element_text(color = "#56A0D3", face = 'bold')
# plot.title = element_text(hjust = 0.5, face = 'bold', size = 16)
)
}
bar_circle_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(percent_severe = round((severe_sum / total) * 100, 2))
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.67, linetype = "dashed", color = "black") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = 'Condition Type'
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
facet_lollipop_plot <- function(data) {
condition_vars <- c('TRAFFIC_CONTROL_DEVICE', 'DEVICE_CONDITION', 'WEATHER_CONDITION',
'LIGHTING_CONDITION', 'ROADWAY_SURFACE_COND', 'TRAFFICWAY_TYPE')
long_df <- data |>
select(all_of(c('severe', condition_vars))) |>
pivot_longer(cols = -severe, names_to = 'condition_type', values_to = 'condition_value') |>
filter(!is.na(condition_value))
plot_df <- long_df |>
group_by(condition_type, condition_value) |>
summarise(
total = n(),
severe_sum = sum(as.numeric(severe) == 1),
.groups = 'drop'
) |>
mutate(
percent_severe = round((severe_sum / total) * 100, 2),
condition_type = recode(condition_type,
"TRAFFIC_CONTROL_DEVICE" = "Traffic Control",
"DEVICE_CONDITION" = "Device Status",
"WEATHER_CONDITION" = "Weather",
"LIGHTING_CONDITION" = "Lighting",
"ROADWAY_SURFACE_COND" = "Road Surface",
"TRAFFICWAY_TYPE" = "Road Type"
)
)
ggplot(plot_df, aes(x = reorder(condition_value, percent_severe), y = percent_severe)) +
geom_col(fill = "#1D7DBD") +
facet_wrap(~ condition_type, scales = "free_x", strip.position = "top") +
geom_hline(yintercept = 2.67, linetype = "dashed", color = "black") +
scale_y_continuous(labels = scales::label_percent(scale = 1)) +
labs(
title = "Crash Severity Rate by Condition Category",
y = "% of Crashes That Were Severe",
x = 'Condition Type'
) +
theme_minimal(base_size = 13) +
theme(
strip.background = element_rect(fill = "gray90", color = "gray80"),
strip.text = element_text(face = "bold", size = 13),
axis.text.x = element_text(angle = 45, hjust = 1, size = 6),
panel.spacing = unit(1, "lines"),
plot.title = element_text(face = "bold", hjust = 0.5)
)
}
facet_lollipop_plot(model_df)
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
shiny::runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
runApp('Desktop/traffic_research')
source("~/Desktop/traffic_research/preprocessing.R", echo=TRUE)
library(rsconnect)
showLogs(appName = "traffic_research", account = "normanzhang")
showLogs(appName = "traffic_research", account = "normanzhang")
showLogs(appName = "traffic_research", account = "normanzhang")
showLogs(appName = "traffic_research", account = "normanzhang")
showLogs(appName = "traffic_research", account = "normanzhang")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
showLogs(appName = "traffic_research", account = "normanzhang")
showLogs(appName = "traffic_research", account = "normanzhang")
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
