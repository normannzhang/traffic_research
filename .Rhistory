bringToFront = TRUE
),
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
) |>
addLegend(
pal = pal,
values = zip_data$crash_count,
title = "Crash Count",
position = "bottomright"
)
}
leaflet_plot(zip_codes, crash_df)
leaflet_plot <- function(zip_data, crash_data){
zip_data <- left_join(zip_data, crash_data, by = "zip")
pal <- colorNumeric("YlOrRd", domain = zip_data$crash_count, na.color = "transparent")
leaflet(zip_data) |>
addTiles() |>
addPolygons(
fillColor = ~pal(crash_count),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "white",
bringToFront = TRUE
),
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
) |>
addLegend(
pal = pal,
values = zip_data$crash_count,
title = "Crash Count",
position = "topright"
)
}
leaflet_plot(zip_codes, crash_df)
leaflet_plot <- function(zip_data, crash_data){
zip_data <- left_join(zip_data, crash_data, by = "zip")
pal <- colorNumeric("YlOrRd", domain = zip_data$crash_count, na.color = "transparent")
leaflet(zip_data) |>
addTiles() |>
addPolygons(
fillColor = ~pal(crash_count),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "white",
bringToFront = TRUE
),
label = ~paste0("<b>ZIP: </b>", zip, '<br>',
"<b>Crashes: </b>", crash_count, '<br>'),
labelOptions = labelOptions(
style = list('font-weight' = 'bold', 'color' = 'black')
)
) |>
addLegend(
pal = pal,
values = zip_data$crash_count,
title = 'Crash Count',
position = 'topright'
)
}
leaflet_plot(zip_codes, crash_df)
leaflet_plot <- function(zip_data, crash_data){
zip_data <- left_join(zip_data, crash_data, by = "zip")
pal <- colorNumeric("YlOrRd", domain = zip_data$crash_count, na.color = "transparent")
leaflet(zip_data) |>
addTiles() |>
addPolygons(
fillColor = ~pal(crash_count),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "white",
bringToFront = TRUE
),
popup = ~paste0("<b>ZIP: </b>", zip, '<br>',
"<b>Crashes: </b>", crash_count, '<br>'),
labelOptions = labelOptions(
style = list('font-weight' = 'bold', 'color' = 'black')
)
) |>
addLegend(
pal = pal,
values = zip_data$crash_count,
title = 'Crash Count',
position = 'topright'
)
}
leaflet_plot(zip_codes, crash_df)
leaflet_icon_plot <- function(zip_data, crash_data) {
crash_data <- st_drop_geometry(crash_data)
zip_data <- left_join(zip_data, crash_data, by = "zip")
zip_data$centroid <- st_centroid(zip_data$geometry)
centroids <- st_coordinates(zip_data$centroid)
icon_urls <- c(
"low" = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Green_circle.svg/30px-Green_circle.svg.png",
"medium" = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Yellow_circle.svg/30px-Yellow_circle.svg.png",
"high" = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Red_circle.svg/30px-Red_circle.svg.png"
)
zip_data$icon_category <- case_when(
zip_data$crash_count < 5000 ~ "low",
zip_data$crash_count < 15000 ~ "medium",
TRUE ~ "high"
)
icons <- iconList(
low = makeIcon(icon_urls["low"], iconWidth = 20, iconHeight = 20),
medium = makeIcon(icon_urls["medium"], iconWidth = 25, iconHeight = 25),
high = makeIcon(icon_urls["high"], iconWidth = 30, iconHeight = 30)
)
leaflet(zip_data) %>%
addTiles() %>%
addMarkers(
lng = centroids[, 1], lat = centroids[, 2],
icon = ~icons[icon_category],
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
)
}
leaflet_icon_plot(zip_codes, crash_df)
leaflet_icon_plot <- function(zip_data, crash_data) {
crash_data <- st_drop_geometry(crash_data)
zip_data <- left_join(zip_data, crash_data, by = "zip")
zip_data$centroid <- st_centroid(zip_data$geometry)
centroids <- st_coordinates(zip_data$centroid)
icon_urls <- c(
"low" = "https://www.flaticon.com/free-icon/emergency_10468285?term=emergency&page=1&position=10&origin=search&related_id=10468285",
"medium" = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Yellow_circle.svg/30px-Yellow_circle.svg.png",
"high" = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Red_circle.svg/30px-Red_circle.svg.png"
)
zip_data$icon_category <- case_when(
zip_data$crash_count < 5000 ~ "low",
zip_data$crash_count < 15000 ~ "medium",
TRUE ~ "high"
)
icons <- iconList(
low = makeIcon(icon_urls["low"], iconWidth = 20, iconHeight = 20),
medium = makeIcon(icon_urls["medium"], iconWidth = 25, iconHeight = 25),
high = makeIcon(icon_urls["high"], iconWidth = 30, iconHeight = 30)
)
leaflet(zip_data) %>%
addTiles() %>%
addMarkers(
lng = centroids[, 1], lat = centroids[, 2],
icon = ~icons[icon_category],
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
)
}
leaflet_icon_plot(zip_codes, crash_df)
leaflet_icon_plot <- function(zip_data, crash_data) {
# Ensure crash_data is a regular dataframe (no geometry)
crash_data <- st_drop_geometry(crash_data)
# Merge crash count data with ZIP shapefile
zip_data <- left_join(zip_data, crash_data, by = "zip")
# Compute ZIP centroids for placing icons
zip_data$centroid <- st_centroid(zip_data$geometry)
centroids <- st_coordinates(zip_data$centroid)
# Define icon categories based on crash count
zip_data$icon_category <- case_when(
zip_data$crash_count < 5000 ~ "low",
zip_data$crash_count < 15000 ~ "medium",
TRUE ~ "high"
)
# Create custom Leaflet icons
icon_low <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Green_circle.svg/30px-Green_circle.svg.png",
iconWidth = 20, iconHeight = 20
)
icon_medium <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Yellow_circle.svg/30px-Yellow_circle.svg.png",
iconWidth = 25, iconHeight = 25
)
icon_high <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Red_circle.svg/30px-Red_circle.svg.png",
iconWidth = 30, iconHeight = 30
)
# Map category to corresponding icon
icon_list <- list(
"low" = icon_low,
"medium" = icon_medium,
"high" = icon_high
)
# Generate the leaflet map with icons
leaflet(zip_data) %>%
addTiles() %>%
addMarkers(
lng = centroids[, 1], lat = centroids[, 2],
icon = ~icon_list[[icon_category]],  # Dynamically select the icon
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
)
}
# Example usage:
leaflet_icon_plot(zip_codes, crash_df)
leaflet_icon_plot <- function(zip_data, crash_data) {
# Ensure crash_data is a regular dataframe (no geometry)
crash_data <- st_drop_geometry(crash_data)
# Merge crash count data with ZIP shapefile
zip_data <- left_join(zip_data, crash_data, by = "zip")
# Compute ZIP centroids for placing icons
zip_data$centroid <- st_centroid(zip_data$geometry)
centroids <- st_coordinates(zip_data$centroid)
# Define icon categories based on crash count
zip_data$icon_category <- case_when(
zip_data$crash_count < 5000 ~ "low",
zip_data$crash_count < 15000 ~ "medium",
TRUE ~ "high"
)
# Create custom Leaflet icons
icon_low <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3a/Green_circle.svg/30px-Green_circle.svg.png",
iconWidth = 20, iconHeight = 20
)
icon_medium <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/3/3e/Yellow_circle.svg/30px-Yellow_circle.svg.png",
iconWidth = 25, iconHeight = 25
)
icon_high <- makeIcon(
iconUrl = "https://upload.wikimedia.org/wikipedia/commons/thumb/4/4e/Red_circle.svg/30px-Red_circle.svg.png",
iconWidth = 30, iconHeight = 30
)
# Map category to corresponding icon
icon_list <- list(
"low" = icon_low,
"medium" = icon_medium,
"high" = icon_high
)
# Generate the leaflet map with icons
leaflet(zip_data) %>%
addTiles() %>%
addMarkers(
lng = centroids[, 1], lat = centroids[, 2],
icon = ~icon_list[[icon_category]],  # Dynamically select the icon
label = ~paste0("ZIP: ", zip, "<br>Crashes: ", crash_count),
labelOptions = labelOptions(
style = list("font-weight" = "bold", "color" = "black")
)
)
}
# Example usage:
leaflet_icon_plot(zip_codes, crash_df)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(crash_sf)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(crash_df)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(crash_df)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(zip_codes)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(zip_codes)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(sf)
library(ggplot2)
library(stringr)
library(lemon)
leaflet_heatmap <- function(crash_sf) {
leaflet(crash_sf) %>%
addTiles() %>%
addHeatmap(
lng = ~st_coordinates(geometry)[, 1],  # Extract longitude
lat = ~st_coordinates(geometry)[, 2],  # Extract latitude
intensity = 1, # Each crash counts as 1
blur = 20,
max = 0.05,  # Adjust if needed for visibility
radius = 15
)
}
# Example usage:
leaflet_heatmap(zip_codes)
leaflet_plot <- function(zip_data, crash_data){
zip_data <- left_join(zip_data, crash_data, by = "zip")
pal <- colorNumeric("YlOrRd", domain = zip_data$crash_count, na.color = "transparent")
leaflet(zip_data) |>
addTiles() |>
addPolygons(
fillColor = ~pal(crash_count),
weight = 1,
opacity = 1,
color = "black",
fillOpacity = 0.7,
highlight = highlightOptions(
weight = 3,
color = "white",
bringToFront = TRUE
),
popup = ~paste0("<b>ZIP: </b>", zip, '<br>',
"<b>Crashes: </b>", crash_count, '<br>'),
labelOptions = labelOptions(
style = list('font-weight' = 'bold', 'color' = 'black')
)
) |>
addLegend(
pal = pal,
values = zip_data$crash_count,
title = 'Crash Count',
position = 'topright'
)
}
leaflet_plot(zip_codes, crash_df)
crash_df
library(ggplot2)
library(dplyr)
library(stringr)
# Generate summary statistics for crashes in general
total_crashes_df <- function(data) {
total_crashes <- nrow(data)
severe_crashes <- sum(data$MOST_SEVERE_INJURY %in% c("FATAL", "INCAPACITATING INJURY"))
fatalities <- sum(data$INJURIES_FATAL, na.rm = TRUE)
return(list(total = total_crashes, severe = severe_crashes, fatalities = fatalities))
}
# Generate summary statistics for crashes per year
year_crashes_df <- function(data) {
data |>
group_by(YEAR) |>
summarize(
total_crashes = n(),
severe_crashes = sum(MOST_SEVERE_INJURY %in% c("FATAL", "INCAPACITATING INJURY"), na.rm = TRUE),
total_fatalities = sum(as.numeric(INJURIES_FATAL), na.rm = TRUE)
)
}
# Generate summary statistics for crashes based on road conditions
road_condition_df <- function(data){
data |>
group_by(ROADWAY_SURFACE_COND) |>
summarize(
total_crashes = n(),
severe_crashes = sum(MOST_SEVERE_INJURY %in% c("FATAL", "INCAPACITATING INJURY"), na.rm = TRUE),
total_fatalities = sum(as.numeric(INJURIES_FATAL), na.rm = TRUE)
)
}
# Generate summary statistics for crashes based on traffic controls
traffic_control_df <- function(data){
data |>
group_by(TRAFFIC_CONTROL_DEVICE) |>
summarize(
total_crashes = n(),
severe_crashes = sum(MOST_SEVERE_INJURY %in% c("FATAL", "INCAPACITATING INJURY"), na.rm = TRUE),
total_fatalities = sum(as.numeric(INJURIES_FATAL), na.rm = TRUE)
)
}
facet_crash_data <- function(data) {
yearly_data <- year_crashes_df(data) |>
mutate(category = "Yearly Crashes", variable = as.character(YEAR)) |>
rename(value = total_crashes) |>
select(category, variable, value)
road_data <- road_condition_df(data) |>
mutate(category = "Road Conditions", variable = as.character(ROADWAY_SURFACE_COND)) |>
rename(value = total_crashes) |>
select(category, variable, value)
control_data <- traffic_control_df(data) |>
mutate(category = "Traffic Control", variable = as.character(TRAFFIC_CONTROL_DEVICE)) |>
rename(value = total_crashes) |>
select(category, variable, value)
combined <- bind_rows(yearly_data, road_data, control_data)
return(combined)
}
facet_crash_data(traffic_df)
total_crashes_df()
total_crashes_df(traffic_df)
year_crashes_df(traffic_df)
line_accidents <- function(data){
df <- year_crashes_df(data)
return(df)
}
print(line_accidents(traffic_df)
\
line_accidents <- function(data){
df <- year_crashes_df(data)
return(df)
}
line_accidents(traffic_df)
line_accidents <- function(data){
df <- year_crashes_df(data) |>
pivot_longer(cols = -YEAR, names_to = 'Crash_Type', values_to = 'count')
return(df)
}
line_accidents(traffic_df)
library(shiny)
library(leaflet)
library(leaflet.extras)
library(dplyr)
library(sf)
library(ggplot2)
library(stringr)
library(lemon)
library(tidyverse)
install.packages('tidyverse')
install.packages("tidyverse")
line_accidents <- function(data){
df <- year_crashes_df(data) |>
pivot_longer(cols = -YEAR, names_to = 'Crash_Type', values_to = 'count')
return(df)
}
line_accidents(traffic_df)
line_accidents <- function(data){
df <- year_crashes_df(data) #|>
#pivot_longer(cols = -YEAR, names_to = 'Crash_Type', values_to = 'count')
return(df)
}
line_accidents(traffic_df)
line_accidents <- function(data){
df <- year_crashes_df(data) |>
pivot_longer(cols = -YEAR, names_to = 'crash_type', values_to = 'count')
pal <- c(
"total_crashes" = "#003366",
"severe_crashes" = "#B3DDF2",
"total_fatalities" = "#FF0000"
)
ggplot(df, aes(x = YEAR, y = count, color = crash_type, group = crash_type)) +
geom_line(size = 1.2) +
geom_point(size = 3) +
scale_color_manual(values = pal) +
labs(
title = "Traffic Crashes in Chicago (2015-2024)",
x = "Year",
y = "Count of Crashes",
color = "Crash Type"
) +
theme_minimal() +  # Clean modern theme
theme(
axis.text.x = element_text(angle = 45, hjust = 1),
plot.title = element_text(size = 16, face = "bold"),
legend.position = "top"
)
}
line_accidents(traffic_df)
runApp()
